import { PREDEFINED_PATTERNS } from './patterns.js';

// Re-export pattern utilities for convenience
export { PREDEFINED_PATTERNS, SENSITIVE_VALUE_PATTERN, OBFUSCATED_STRING, createPattern } from './patterns.js';

/**
 * Custom error for invalid input
 */
class InvalidInputError extends Error {
    constructor(message) {
        super(message);
        this.name = 'InvalidInputError';
    }
}

/**
 * Validates input parameter
 * @param {*} input - The input to validate
 * @throws {InvalidInputError} If input is invalid
 */
function validateInput(input) {
    if (typeof input !== 'string') {
        throw new InvalidInputError('Input must be a valid string');
    }
    
    if (input.trim().length === 0) {
        throw new InvalidInputError('Input cannot be empty or whitespace only');
    }
}

/**
 * Masks sensitive data in a given string using predefined and custom patterns.
 * @param {string} input - The input string that may contain sensitive data
 * @param {Array} customPatterns - Optional array of custom masking patterns
 * @returns {string} A new string with sensitive data masked
 * @throws {InvalidInputError} If input is not a valid string
 */
export function maskSensitiveData(input, customPatterns = []) {
    validateInput(input);
    
    // Combine predefined patterns with custom patterns
    const patterns = [...PREDEFINED_PATTERNS, ...customPatterns];

    let maskedString = input;

    // Apply each pattern to mask sensitive data
    patterns.forEach(({ regex, mask }) => {
        maskedString = maskedString.replace(regex, mask);
    });

    return maskedString;
}

// Export error classes for better error handling
export { InvalidInputError };
