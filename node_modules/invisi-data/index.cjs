'use strict';

/**
 * Predefined patterns for masking sensitive data
 * Each pattern contains a name, regex, and mask string
 */

// Reusable regex components
const SENSITIVE_VALUE_PATTERN = '([^"\\s\\r\\n]+)';
const OBFUSCATED_STRING = '****';

/**
 * Creates a pattern object for sensitive data masking
 * @param {string} name - Human readable name for the pattern
 * @param {RegExp} regex - Regular expression to match sensitive data
 * @param {string} mask - Replacement string for matched data
 * @returns {Object} Pattern object
 */
function createPattern(name, regex, mask) {
    return { name, regex, mask };
}

/**
 * Predefined patterns for common sensitive data types
 */
const PREDEFINED_PATTERNS = [
    createPattern(
        'Authorization Header',
        new RegExp(`"Authorization"\\s*:\\s*"Bearer\\s+${SENSITIVE_VALUE_PATTERN}"`, 'gi'),
        `"Authorization": "Bearer ${OBFUSCATED_STRING}"`
    ),
    createPattern(
        'Authorization Header in cURL',
        new RegExp(`"Authorization\\s*Bearer\\s+${SENSITIVE_VALUE_PATTERN}"`, 'gi'),
        `"Authorization Bearer ${OBFUSCATED_STRING}"`
    ),
    createPattern(
        'API Key',
        new RegExp(`"api[-_]?key"\\s*:\\s*"${SENSITIVE_VALUE_PATTERN}"`, 'gi'),
        `"api-key": "${OBFUSCATED_STRING}"`
    ),
    createPattern(
        'Access Token',
        new RegExp(`"access[-_]?token"\\s*:\\s*"${SENSITIVE_VALUE_PATTERN}"`, 'gi'),
        `"access-token": "${OBFUSCATED_STRING}"`
    ),
    createPattern(
        'Refresh Token',
        new RegExp(`"refresh[-_]?token"\\s*:\\s*"${SENSITIVE_VALUE_PATTERN}"`, 'gi'),
        `"refresh-token": "${OBFUSCATED_STRING}"`
    ),
    createPattern(
        'Client ID',
        new RegExp(`"client[-_]?id"\\s*:\\s*"${SENSITIVE_VALUE_PATTERN}"`, 'gi'),
        `"client-id": "${OBFUSCATED_STRING}"`
    ),
    createPattern(
        'ID Token',
        new RegExp(`"id[-_]?token"\\s*:\\s*"${SENSITIVE_VALUE_PATTERN}"`, 'gi'),
        `"id-token": "${OBFUSCATED_STRING}"`
    ),
    createPattern(
        'Client Secret',
        new RegExp(`"client[-_]?secret"\\s*:\\s*"${SENSITIVE_VALUE_PATTERN}"`, 'gi'),
        `"client-secret": "${OBFUSCATED_STRING}"`
    ),
    createPattern(
        'Token',
        new RegExp(`"token"\\s*:\\s*"${SENSITIVE_VALUE_PATTERN}"`, 'gi'),
        `"token": "${OBFUSCATED_STRING}"`
    ),
    createPattern(
        'Password',
        new RegExp(`"password"\\s*:\\s*"${SENSITIVE_VALUE_PATTERN}"`, 'gi'),
        `"password": "${OBFUSCATED_STRING}"`
    ),
    createPattern(
        'Basic Authorization',
        new RegExp(`"Authorization"\\s*:\\s*"Basic\\s+${SENSITIVE_VALUE_PATTERN}"`, 'gi'),
        `"Authorization": "Basic ${OBFUSCATED_STRING}"`
    ),
];

/**
 * Custom error for invalid input
 */
class InvalidInputError extends Error {
    constructor(message) {
        super(message);
        this.name = 'InvalidInputError';
    }
}

/**
 * Validates input parameter
 * @param {*} input - The input to validate
 * @throws {InvalidInputError} If input is invalid
 */
function validateInput(input) {
    if (typeof input !== 'string') {
        throw new InvalidInputError('Input must be a valid string');
    }
    
    if (input.trim().length === 0) {
        throw new InvalidInputError('Input cannot be empty or whitespace only');
    }
}

/**
 * Masks sensitive data in a given string using predefined and custom patterns.
 * @param {string} input - The input string that may contain sensitive data
 * @param {Array} customPatterns - Optional array of custom masking patterns
 * @returns {string} A new string with sensitive data masked
 * @throws {InvalidInputError} If input is not a valid string
 */
function maskSensitiveData(input, customPatterns = []) {
    validateInput(input);
    
    // Combine predefined patterns with custom patterns
    const patterns = [...PREDEFINED_PATTERNS, ...customPatterns];

    let maskedString = input;

    // Apply each pattern to mask sensitive data
    patterns.forEach(({ regex, mask }) => {
        maskedString = maskedString.replace(regex, mask);
    });

    return maskedString;
}

exports.InvalidInputError = InvalidInputError;
exports.OBFUSCATED_STRING = OBFUSCATED_STRING;
exports.PREDEFINED_PATTERNS = PREDEFINED_PATTERNS;
exports.SENSITIVE_VALUE_PATTERN = SENSITIVE_VALUE_PATTERN;
exports.createPattern = createPattern;
exports.maskSensitiveData = maskSensitiveData;
