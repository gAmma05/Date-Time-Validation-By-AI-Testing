export type MaskingPattern = {
  name: string;
  regex: RegExp;
  mask: string;
};

/**
 * Custom error class for invalid input
 */
export class InvalidInputError extends Error {
  name: 'InvalidInputError';
  constructor(message: string);
}

/**
 * Masks sensitive data in a given string using predefined and custom patterns.
 * @param input - The input string to mask.
 * @param customPatterns - Optional custom masking patterns to apply.
 * @returns The masked string with sensitive data replaced.
 * @throws {InvalidInputError} When input is not a valid string or is empty.
 */
export function maskSensitiveData(
  input: string,
  customPatterns?: MaskingPattern[]
): string;

/**
 * Predefined patterns for common sensitive data types
 */
export const PREDEFINED_PATTERNS: MaskingPattern[];

/**
 * Regular expression pattern for sensitive values
 */
export const SENSITIVE_VALUE_PATTERN: string;

/**
 * Default obfuscation string
 */
export const OBFUSCATED_STRING: string;

/**
 * Creates a pattern object for sensitive data masking
 * @param name - Human readable name for the pattern
 * @param regex - Regular expression to match sensitive data
 * @param mask - Replacement string for matched data
 * @returns Pattern object
 */
export function createPattern(name: string, regex: RegExp, mask: string): MaskingPattern;
